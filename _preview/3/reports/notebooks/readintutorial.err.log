Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/asyncio/base_events.py", line 719, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
jetstream_url = 'https://js2.jetstream-cloud.org:8001/'

s3 = s3fs.S3FileSystem(anon=True, client_kwargs=dict(endpoint_url=jetstream_url))

# Generate a list of all files in CESM folder
s3path = 's3://pythia/ocean-bgc/cesm/g.e22.GOMIPECOIAF_JRA-1p4-2018.TL319_g17.4p2z.002branch/ocn/proc/tseries/month_1/*'
remote_files = s3.glob(s3path)

# Open all files from folder
fileset = [s3.open(file) for file in remote_files]

# Open with xarray
ds = xr.open_mfdataset(fileset, data_vars="minimal", coords='minimal', compat="override", parallel=True,
                       drop_variables=["transport_components", "transport_regions", 'moc_components'], decode_times=True)

------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 13[39m
[32m     10[39m fileset = [s3.open(file) [38;5;28;01mfor[39;00m file [38;5;129;01min[39;00m remote_files]
[32m     12[39m [38;5;66;03m# Open with xarray[39;00m
[32m---> [39m[32m13[39m ds = [43mxr[49m[43m.[49m[43mopen_mfdataset[49m[43m([49m[43mfileset[49m[43m,[49m[43m [49m[43mdata_vars[49m[43m=[49m[33;43m"[39;49m[33;43mminimal[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mcoords[49m[43m=[49m[33;43m'[39;49m[33;43mminimal[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43mcompat[49m[43m=[49m[33;43m"[39;49m[33;43moverride[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mparallel[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[32m     14[39m [43m                       [49m[43mdrop_variables[49m[43m=[49m[43m[[49m[33;43m"[39;49m[33;43mtransport_components[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mtransport_regions[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m'[39;49m[33;43mmoc_components[39;49m[33;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43mdecode_times[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m

[36mFile [39m[32m~/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/xarray/backends/api.py:1643[39m, in [36mopen_mfdataset[39m[34m(paths, chunks, concat_dim, compat, preprocess, engine, data_vars, coords, combine, parallel, join, attrs_file, combine_attrs, **kwargs)[39m
[32m   1638[39m     datasets = [preprocess(ds) [38;5;28;01mfor[39;00m ds [38;5;129;01min[39;00m datasets]
[32m   1640[39m [38;5;28;01mif[39;00m parallel:
[32m   1641[39m     [38;5;66;03m# calling compute here will return the datasets/file_objs lists,[39;00m
[32m   1642[39m     [38;5;66;03m# the underlying datasets will still be stored as dask arrays[39;00m
[32m-> [39m[32m1643[39m     datasets, closers = [43mdask[49m[43m.[49m[43mcompute[49m[43m([49m[43mdatasets[49m[43m,[49m[43m [49m[43mclosers[49m[43m)[49m
[32m   1645[39m [38;5;66;03m# Combine all datasets, closing them in case of a ValueError[39;00m
[32m   1646[39m [38;5;28;01mtry[39;00m:

[36mFile [39m[32m~/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/dask/base.py:681[39m, in [36mcompute[39m[34m(traverse, optimize_graph, scheduler, get, *args, **kwargs)[39m
[32m    678[39m     expr = expr.optimize()
[32m    679[39m     keys = [38;5;28mlist[39m(flatten(expr.__dask_keys__()))
[32m--> [39m[32m681[39m     results = [43mschedule[49m[43m([49m[43mexpr[49m[43m,[49m[43m [49m[43mkeys[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    683[39m [38;5;28;01mreturn[39;00m repack(results)

[36mFile [39m[32m~/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/xarray/backends/api.py:668[39m, in [36mopen_dataset[39m[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)[39m
[32m    665[39m     kwargs.update(backend_kwargs)
[32m    667[39m [38;5;28;01mif[39;00m engine [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m668[39m     engine = [43mplugins[49m[43m.[49m[43mguess_engine[49m[43m([49m[43mfilename_or_obj[49m[43m)[49m
[32m    670[39m [38;5;28;01mif[39;00m from_array_kwargs [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    671[39m     from_array_kwargs = {}

[36mFile [39m[32m~/miniconda3/envs/ocean-bgc-cookbook-dev/lib/python3.13/site-packages/xarray/backends/plugins.py:194[39m, in [36mguess_engine[39m[34m(store_spec)[39m
[32m    186[39m [38;5;28;01melse[39;00m:
[32m    187[39m     error_msg = (
[32m    188[39m         [33m"[39m[33mfound the following matches with the input file in xarray[39m[33m'[39m[33ms IO [39m[33m"[39m
[32m    189[39m         [33mf[39m[33m"[39m[33mbackends: [39m[38;5;132;01m{[39;00mcompatible_engines[38;5;132;01m}[39;00m[33m. But their dependencies may not be installed, see:[39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    190[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/user-guide/io.html [39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    191[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html[39m[33m"[39m
[32m    192[39m     )
[32m--> [39m[32m194[39m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(error_msg)

[31mValueError[39m: did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'h5netcdf', 'scipy', 'gini', 'rasterio', 'zarr']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:
https://docs.xarray.dev/en/stable/getting-started-guide/installing.html
https://docs.xarray.dev/en/stable/user-guide/io.html

